Copyright (C) 2000, 2001  Internet Software Consortium.
See COPYRIGHT in the source root or http://isc.org/copyright.html for terms.

$Id: release,v 1.21.2.1 2001/01/09 22:39:43 bwelling Exp $

Preparing a bind9 release

Here's a rough outline of the steps to follow in preparing a new bind9
release.

 - Update the README file

 - Send the new README file to webteam@nominum.com at least 48
   hours prior to the planned release and ask them to prepare
   the web pages for the new version.

 - Verify that the file "version" contains the correct version
   number (it should have been incremented after the
   previous release)

 - Update the lib/*/api files as needed.  See the libtool 
   info file for information about what the various numbers mean.

 - Check that http://status.isc.org/bind9/bind9.html shows
   a clean build and test status for all supported systems.

 - Check that running "make all_tests" in bin/tests does not
   produce compile errors.

 - Regenerate the .html files in doc/arm by running genhtml.sh
   and check them in.  Note that not all machines have the
   necessary XML tools, but at least trebuchet and Scanner's
   machine do.

 - Verify that the documents in doc/misc are up-to-date.

 - Update the copyrights.  According to tale:

     Go to the root of the source tree.
     The scripts need to be run from there; they reference the util
     subdirectory internally.

     $ make distclean
     ... [I prefer to check out a fresh source tree --gson]
     $ perl util/merge_copyrights
     $ diff util/copyrights util/newcopyrights
     ... examine output, particularly any files with the "?" type, and
     ... then edit util/newcopyrights if necessary
     $ mv util/newcopyrights util/copyrights
     $ cvs ci -m'merge_copyrights' util/copyrights
     $ perl util/update_copyrights < util/copyrights
     $ cvs diff
     ... examine output, edit as necessary.  mail me about anything that
     ... the script should have been able to do itself. :-)
     $ cvs ci -m'update_copyrights'

 - Announce a CVS freeze if doing a beta release from the mainline,
   or stop doing pullups if building from a release branch.

 - Run util/altbuild.sh (from the mainline).  This is to make sure that
   builds using libtool, separate source/object directories, and other 
   obscure build options work.  This script may need some hacking if run
   on anything other than NetBSD.  Save the output (it's big) and look 
   for error and warning messages.

      cd $top_of_mainline_tree
      sh util/altbuild.sh v9_0

 - If you can (= your system is similar enough to the one Tale is using),
   check the header files for cruft by running the command
   [ This step is quite imperfect and should probably be skipped
     for now -- Tale ]

      find lib -name '*.h' -print | xargs perl util/check-includes.pl

 - Ensure that the JPNIC patch applies cleanly:

   XXX This is impacted by sanitize.pl

   $ sh util/sanitize_all.sh
   $ patch -p0 < contrib/idn/mdnkit/patch/bind9/patch.most > patch.out 2>&1
   $ egrep Hunk patch.out

   All hunks should have applied successfully with no offset or fuzz.
   If all succeeded but some were offset or had fuzz, the patch will be
   regenerated at the end of this stage.

   $ cd contrib/idn/mdnkit
   [ Sample on netbsd ... ]
   $ CFLAGS=-I/usr/local/include ./configure  '--with-iconv=-L/usr/local/lib -liconv'
   $ make
   $ cd ../../.. ; : cd back to top level
   $ cp configure configure.orig
   $ autoconf
   $ ./configure

   $ make
   ... should cleanly compile
   $ make distclean
   $ rm -rf /tmp/mdn
   $ mkdir -p /tmp/mdn/{lib,include}
   $ mdn=`pwd`/contrib/idn/mdnkit
   $ cp $mdn/lib/.libs/libmdn.so /tmp/mdn/lib
   $ cp -r $mdn/include/mdn /tmp/mdn/include
   $ ./configure --with-mdn=/tmp/mdn --with-iconv="-L/usr/local/lib -liconv" 
   $ LD_LIBRARY_PATH=/usr/local/lib:/tmp/mdn/lib:/usr/lib make
   ... should cleanly compile

   [ Some tests will be added to bin/tests/system to validate operation. ]

   Generate a fresh copy of the diffs:

   $ patchd=$mdn/patch/bind9    
   $ awk '/^\+\+\+ / {print $2}' $patchd/patch.most | 
        while read i; do
                diff -u2 $i.orig $i
        done > $patchd/patch.most.new
   $ cvs diff -u2 configure > $patchd/patch.configure
   $ mv $patchd/patch.most.new $patchd
   $ cvs ci -ko $patchd/patch.*

 - Add a marker line like "	--- 9.0.0b3 released ---"
   to the CHANGES file.

 - Tag the CVS source tree with the final tag, as in
   "cvs rtag v9_0_0b3 bind9" (mainline) or
   "cvs rtag -r v9_0 v9_0_0rc1 bind9" (release branch).

 - Build the release kit.  This procedure differs
   between the 9.0 release branch and the mainline.
   On the release branch,

        cd <temporary directory>
	cvs export -r v9_0_0rc6 bind9
	cd bind9
	sh configure
	make kit

   On the mainline, use the "util/kit.sh" script.

 - Build bind9 from the kit on at least one machine
   and test it.  Run it as a caching name server.
   If you can, try resolving some IPv6 addresses and
   doing queries over IPv6.

 - If problems are found at this stage, fix them, move the
   release tag up using "rtag -F", and respin the kit.

 - Take the resulting distribution files to a secure system
   and sign them with the ISC signing PGP key:

   	pgp -sba bind-9.1.0b1.tar.gz -u 0x51BAB2ED

 - Fix the permissions on the signature file:

	chmod 644 bind-9.1.0b1.tar.gz.asc

 - Verify the PGP signature:

	pgp bind-9.1.0b1.tar.gz.asc bind-9.1.0b1.tar.gz

 - Prepare a release announcement based on the previous one.

 - Copy the distribution and PGP signature files to the FTP site:

     ver=9.1.0b1
     ssh -n isrv4.pa.vix.com "mkdir /udir/ftp/isc/bind9/$ver"
     scp bind-$ver.tar.gz bind-$ver.tar.gz.asc \
	isrv4.pa.vix.com:/udir/ftp/isc/bind9/$ver

 - Download using FTP (or Netscape) using the URLs in the release
   announcement and verify the PGP signature again

 - Increment the version in the file "version"

 - Resume doing pullups

 - Announce the release on bind-announce@isc.org

