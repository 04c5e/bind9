#!/usr/local/bin/perl -w
#
# Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
# Copyright (C) 1998-2001  Internet Software Consortium.
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

# $Id: update_copyrights,v 1.26.206.8 2005/05/12 07:54:54 marka Exp $

require 5.002;

# Map copyright owners to the files containing copyright messages.
# The first line of the copyright message is not in the file;
# it is constructed by this script.

my %owner2filename = (
	"" => "util/COPYRIGHT",
	"NAI" => "util/COPYRIGHT.NAI",
	"NOM" => "util/COPYRIGHT.NOM",
	"BSDI" => "util/COPYRIGHT.BSDI",
	"BRIEF" => "util/COPYRIGHT.BRIEF",
	"PORTION" => "util/COPYRIGHT.PORTION",
);

# Map each copyright owner name to a reference to an array containing
# the lines of the copyright message.

my %owner2text = ();

my $keyword_pat = '\$(Id:.*|Revision:.*|Id|Revision)\$';

foreach $owner (keys %owner2filename) {
        my $f = $owner2filename{$owner};
        open(COPYRIGHT, "<$f") || die "can't open $f: $!";
        @copyright_text = <COPYRIGHT>;
        close(COPYRIGHT);
        $owner2text{$owner} = [ @copyright_text ];
}

my %file_types = ();
my %file_years = ();
my $years_list;
my $parent;

while (<>) {
	chomp;
	($file, $type, $years) = split(/\s+/);
	$file_types{$file} = $type;
	$file_years{$file} = $years;
}

sub getyears {
	$parent = $_[0];
	$parent =~ s/PARENT://;
	$years_list = $file_years{$parent};
	if (defined($years_list) && $years_list =~ /^PARENT:/) {
		print "BAD PARENT:$parent\n";
		undefine($years_list);
	}
}

sub docbook {
	$parent = $_[0];
	$parent =~ s/\.[^.]*$/.docbook/;
	$years_list = $file_years{$parent};
}

sub copyright {
	my $holder = shift;
	my $result = "";
	return $result unless (@_);
	$result = "$result    <copyright>\n";
	$result = "$result      <year>$_</year>\n" foreach (@_);
	$result = "$result      <holder>$holder</holder>\n";
	$result = "$result    </copyright>\n";
	return $result;
}

sub copyrights {
	my $a = copyright("Internet Systems Consortium, Inc. (\"ISC\")",
		   grep({ $_ >= 2004} @_));
	my $b = copyright("Internet Software Consortium.",
		   grep({ $_ < 2004} @_));
	return "$a$b";
}

foreach $file (keys %file_types) {
	$typeandowner = $file_types{$file};
	$years_list = $file_years{$file};

        if ( ! -f $file ) {
                print "$file: missing\n";
                next;
        }

        if ($years_list =~ /PARENT:/) {
		getyears($years_list);
		if (!defined $years_list) {
			print "$file: has bad parent $parent\n";
			next;
		}
	}

	if ($years_list eq "DOCBOOK") {
		docbook($file);
		if (!defined $years_list) {
			print "$file: has bad parent $parent\n";
			next;
		}
	}

        @years = split(/,/, $years_list);

        my ($type, $owner) = split(/\./, $typeandowner);
        $owner = "" if !defined $owner;

        $textp = $owner2text{$owner};
        if (!defined $textp) {
                print "$file: unknown copyright owner $owner\n";
                next;
        }

        next if $type eq "X" or $type eq "BAT";

        $before_copyright = "";
        $c_comment = 0;
        $shell_comment = 0;
        $m4_comment = 0;
        $sgml_comment = 0;
        $zone_comment = 0;
        $man_comment = 0;
        $start_comment = "";
        $end_comment = "";
        $first = "";
        if ($type =~ /^(C|YACC|CONF-C)$/) {
                $c_comment = 1;
                $start_comment = "/*\n";
                $prefix = " * ";
                $end_comment = " */\n";
        } elsif ($type =~ /^(SH|PERL|TCL|MAKE|CONF-SH)$/) {
                $shell_comment = 1;
                $prefix = "# ";
        } elsif ($type eq "ZONE" || $type eq "MC") {
                $zone_comment = 1;
                $prefix = "; ";
        } elsif ($type eq "MAN") {
                $man_comment = 1;
                $prefix = ".\\\" ";
        } elsif ($type eq "M4") {
                $m4_comment = 1;
                $prefix = "dnl ";
        } elsif ($type eq "HTML" || $type eq "SGML") {
                $sgml_comment = 1;
                $start_comment = "<!--\n";
                $prefix = " - ";
                $end_comment = "-->\n";
        } elsif ($type eq "TXT") {
                $prefix = "";
        } else {
                print "$file: type '$type' not supported yet; skipping\n";
                next;
        }

        ($nonspaceprefix = $prefix) =~ s/\s+$//;

        open(SOURCE, "<$file") || die "can't open $file: $!";
        $_ = <SOURCE>;
        if ($type eq "YACC") {
                unless ($_ eq "%{\n") {
                        print "$file: unexpected yacc file start ",
                              "(expected \"%{\\n\")\n";
                        close(SOURCE);
                        next;
                }
                $before_copyright = "$_";
                $_ = <SOURCE>;
        }
        if ($c_comment && /^\/\*/) {
                $_ = <SOURCE>;
                if ($_ !~ /[Cc]opyright/) {
                        print "$file: non-copyright comment\n";
                        close(SOURCE);
                        next;
                }
                if ($_ !~ /\*\//) {
                        while (<SOURCE>) {
                                last if $_ =~ /\*\//;
                        }
                }
        } elsif ($shell_comment) {
                if (/^\#\!/) {
                        $before_copyright = "$_#\n";
                        $_ = <SOURCE>;
                        $_ = <SOURCE> if $_ eq "#\n";
                }
                if (/^\#/) {
                        if ($_ !~ /[Cc]opyright/) {
                                print "$file: non-copyright comment\n";
                                close(SOURCE);
                                next;
                        }
                        while (<SOURCE>) {
                                if ($_ !~ /^\#/) {
                                        $first = $_;
                                        last;
                                }
                        }
                } else {
                        $first = $_;
                }
        } elsif (($m4_comment || $zone_comment || $man_comment) &&
                 /^\Q$nonspaceprefix\E/) {

                while (/^\Q$nonspaceprefix\E\s*$/) {
                        $_ = <SOURCE>;
                }

                if ($_ !~ /[Cc]opyright/) {
                        print "$file: non-copyright comment\n";
                        close(SOURCE);
                        next;
                }
                while (<SOURCE>) {
                        if ($_ !~ /^\Q$nonspaceprefix\E/ ||
                            $_ =~ /$keyword_pat/) {
                                $first = $_;
                                last;
                        }
                }
        } elsif ($sgml_comment) {
                if (/^<!DOCTYPE/) {
                        $before_copyright = $_;
                        $_ = <SOURCE>;
			while (! /^<!/ ) {
				$before_copyright = "$before_copyright$_";
				$_ = <SOURCE>;
			}
                }
                if (/^<!/) {
                        $_ = <SOURCE> if $_ eq "<!--\n";
                        if ($_ !~ /[Cc]opyright/) {
                                print "$file: non-copyright comment\n";
                                close(SOURCE);
                                next;
                        }
                        while (defined($_)) {
                                last if s/.*-->//;
                                $_ = <SOURCE>;
                        }
                        print "$file: unterminated comment\n"
                          unless defined($_);
                        if ($_ ne "\n") {
                                $first = $_;
                        } else {
                                $first = <SOURCE>;
                        }
                } else {
                        $first = $_;
                }
        } elsif ($type eq "TXT") {
                if ($_ =~ /[Cc]opyright/) {
                        $/ = "";            # paragraph at a time
                        while (<SOURCE>) {
                                # Not very maintainable, but ok enough for now.
                                last unless
                                  /[Cc]opyright/ ||
                                  /See COPYRIGHT in the source root/ ||
                                  /Permission to use, copy, modify, and / ||
                                  /THE SOFTWARE IS PROVIDED "AS IS" AND /;
                        }
                        $/ = "\n";
                }
                $first = $_;
        } else {
                $first = $_;
        }

        $first = "" if ! defined($first);

        open(TARGET, ">$file.new") || die "can't open $file.new: $!";
        print TARGET $before_copyright if $before_copyright;
        print TARGET $start_comment if $start_comment;

        $sysyears = "";
        $sftyears = "";
        $nomyears = "";

	#
	# Internet Software Consortium: up to 2003
	#
        $last_year = 0;
        $anchor_year = 0;
	$years = "";
        foreach $year (@years) {
		if ($year >= 2004) { next; }
                if ($last_year != 0 && $year == $last_year + 1) {
                        if ($year > $anchor_year + 1) {
                                substr($years, $anchor_end) = "-$year";
                        } else {
                                $years .= ", $year";
                        }
                } else {
                        $years .= $last_year == 0 ? "$year" : ", $year";
                        #if ($anchor_year != 0) {
                        #        print "$file: noncontiguous year: ",
                        #              "$year != $last_year + 1\n";
                        #}
                        $anchor_year = $year;
                        $anchor_end = length($years);
                }

                $last_year = $year;
        }
	$sftyears = $years;

	#
	# Nominum: up to 2001.
	#
        $last_year = 0;
        $anchor_year = 0;
	$years = "";
        foreach $year (@years) {
		if ($year >= 2002) { next; }
                if ($last_year != 0 && $year == $last_year + 1) {
                        if ($year > $anchor_year + 1) {
                                substr($years, $anchor_end) = "-$year";
                        } else {
                                $years .= ", $year";
                        }
                } else {
                        $years .= $last_year == 0 ? "$year" : ", $year";
                        #if ($anchor_year != 0) {
                        #        print "$file: noncontiguous year: ",
                        #              "$year != $last_year + 1\n";
                        #}
                        $anchor_year = $year;
                        $anchor_end = length($years);
                }

                $last_year = $year;
        }
	$nomyears = $years;

	#
	# Internet Systems Consortium: 2004 onwards.
	#
        $last_year = 0;
        $anchor_year = 0;
	$years = "";
	$anchor_end = length($years);
        foreach $year (@years) {
		if ($year < 2004) { next; }
                if ($last_year != 0 && $year == $last_year + 1) {
                        if ($year > $anchor_year + 1) {
                                substr($years, $anchor_end) = "-$year";
                        } else {
                                $years .= ", $year";
                        }
                } else {
                        $years .= $last_year == 0 ? "$year" : ", $year";
                        #if ($anchor_year != 0) {
                        #        print "$file: noncontiguous year: ",
                        #              "$year != $last_year + 1\n";
                        #}
                        $anchor_year = $year;
                        $anchor_end = length($years);
                }

                $last_year = $year;
        }
	$sysyears = $years;

        ($firstline, $secondline, $thirdline, @otherlines) = @$textp;

        $firstline =~ s/\@SYSYEARS\@/$sysyears/;
        $secondline =~ s/\@SFTYEARS\@/$sftyears/;
        $thirdline =~ s/\@NOMYEARS\@/$nomyears/;

        print TARGET "$prefix$firstline";
	if ($sftyears ne "" ) {
		print TARGET $secondline =~ /^$/ ? $nonspaceprefix : $prefix;
		print TARGET "$secondline";
	}
        print TARGET $thirdline =~ /^$/ ? $nonspaceprefix : $prefix;
	print TARGET "$thirdline";

        foreach $_ (@otherlines) {
                print TARGET (/^$/ ? $nonspaceprefix : $prefix);
                print TARGET "$_";
        }
        print TARGET $end_comment if $end_comment;

        if ($first eq "") {
                $first = <SOURCE>;
        }

        if (defined($first)) {
          	if ($type eq 'MAN') {
                	print TARGET "$nonspaceprefix\n";
		} else {
	                print TARGET "\n";
                }

                undef $/;
                $_ = <SOURCE>;
                $/ = "\n";

		if ($type eq 'SGML' && m:<docinfo>.*?</docinfo>:s) {
			print "docinfo: $file\n";
			my $r = copyrights(@years);
			s:<docinfo>.*?></docinfo>:<docinfo>\n$r  </docinfo>:s;
		}
		if ($type eq 'SGML' && m:<bookinfo>.*?</bookinfo>:s) {
			print "bookinfo: $file\n";
			my $r = copyrights(@years);
			s:<bookinfo>.*?</bookinfo>:<bookinfo>\n$r  </bookinfo>:s;
		}

                my ($start, $end);
                if ($start_comment ne "") {
                        ($start = $start_comment) =~ s/\s*\n/ /;
                        ($end = $end_comment) =~ s/^\s*(.*)\n/ $1\n/;
                } elsif ($prefix ne "") {
                        ($start = $prefix) =~ s/\s*\n//;
                        $end = "\n";
                } else {
                        $start = "";
                        $end = "\n";
                }

                if ($first !~ /$keyword_pat/ && $_ !~ /$keyword_pat/) {
			$end = "\n$nonspaceprefix" if ($type eq "MAN");
                        print TARGET "$start\$";
                        print TARGET "Id";
                        print TARGET "\$$end\n";
                }

                print TARGET $first if $first !~ /^\s*$/;
                print TARGET $_;
        }
        close(TARGET);
        close(SOURCE);

        $mode = (stat $file)[2]&511;
        chmod $mode, "$file.new";

        if (system("cmp -s $file.new $file") == 0) {
                unlink("$file.new");
        } else {
                rename("$file.new", "$file")
                  or die "rename($file.new, $file): $!";
        }
}
